{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Title","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAYeA,mLARP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAW,2BAAf,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,8BAAd,uDALIC,aCaLC,mLAXP,OACIL,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,QAAMI,SAAUC,KAAKC,MAAMC,YAC1BT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,OAAOC,YAAa,SAC5CZ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,UAAUC,YAAa,YAC/CZ,EAAAC,EAAAC,cAAA,sCAPGE,aCaJS,mLAXP,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVI,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAWf,EAAAC,EAAAC,cAAA,KAAGC,UAAW,gBAAd,aAAuCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMM,KAA7C,KAAqDP,KAAKC,MAAMO,SAAvG,KACzCR,KAAKC,MAAMQ,aAAehB,EAAAC,EAAAC,cAAA,KAAGC,UAAW,gBAAd,iBAA2CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMQ,cAClHT,KAAKC,MAAMS,UAAYjB,EAAAC,EAAAC,cAAA,KAAGC,UAAW,gBAAd,aAAuCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMS,WAC3GV,KAAKC,MAAMU,aAAelB,EAAAC,EAAAC,cAAA,KAAGC,UAAW,gBAAd,cAAwCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMU,cAC/GX,KAAKC,MAAMW,OAASnB,EAAAC,EAAAC,cAAA,KAAGC,UAAW,gBAAeH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMW,OAA1E,aARff,aCIhBgB,EAAU,mCAwEDC,6MArEbC,MAAM,CACJN,iBAAaO,EACbT,UAAKS,EACLR,aAAQQ,EACRN,cAASM,EACTL,iBAAYK,EACZJ,WAAOI,KAGTd,iDAAa,SAAAe,EAAOC,GAAP,IAAAX,EAAAC,EAAAW,EAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbP,EAAEQ,iBACMnB,EAAOW,EAAES,OAAOC,SAASrB,KAAKsB,MAC9BrB,EAAUU,EAAES,OAAOC,SAASpB,QAAQqB,MAH/BN,EAAAE,KAAA,EAIYK,MAAK,oDAAAC,OAAsDxB,EAAtD,KAAAwB,OAA8DvB,EAA9D,cAAAuB,OAAkFlB,IAJnG,cAILM,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAKQN,EAASc,OALjB,OAKLb,EALKG,EAAAS,KAOLzB,GAAQC,EACZ0B,EAAKC,SAAS,CACZ1B,YAAaW,EAAKgB,KAAKC,KACvB9B,KAAMa,EAAKhB,KACXI,QAAQY,EAAKkB,IAAI9B,QACjBE,SAASU,EAAKgB,KAAK1B,SACnBC,YAAYS,EAAKmB,QAAQ,GAAG5B,YAC5BC,MAAM,KAGNsB,EAAKC,SAAS,CACZ1B,iBAAaO,EACbT,UAAMS,EACNR,aAAQQ,EACRN,cAASM,EACTL,iBAAYK,EACZJ,MAAM,2BAvBD,yBAAAW,EAAAiB,SAAAvB,oIA6BX,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,4BACdH,EAAAC,EAAAC,cAAC8C,EAAD,OAEFhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,4BACdH,EAAAC,EAAAC,cAAC+C,EAAD,CAAMxC,WAAYF,KAAKE,aACvBT,EAAAC,EAAAC,cAACgD,EAAD,CACAlC,YAAaT,KAAKe,MAAMN,YACxBF,KAAOP,KAAKe,MAAMR,KAClBC,QAASR,KAAKe,MAAMP,QACpBE,SAAWV,KAAKe,MAAML,SACtBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,sBAzDpBf,aCIE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb392019.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Title extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className= \" title-container__title\">Weather Finder</h1>\n                <p className= \" title-container__subtitle\">Find Out Temperature,Conditions and more...</p>\n            </div>\n        )\n    }\n}\nexport default Title;","import React, { Component } from 'react'\n\nclass Form extends Component {\n    render() {\n        return (\n            <div>\n               <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder =\"city\"/>\n                <input type=\"text\" name=\"country\" placeholder =\"country\"/>\n                <button>Get weather</button>\n               </form>\n            </div>\n        )\n    }\n}\nexport default Form;","import React, { Component } from 'react'\n\nclass Weather extends Component {\n    render() {\n        return (\n            <div className=\"weather__info\">\n                {this.props.city && this.props.country && <p className =\"weather__key\">Location: <span className=\"weather__value\">{this.props.city}, {this.props.country}</span> </p>}\n                {this.props.temperature && <p className =\"weather__key\">Temperature:  <span className=\"weather__value\">{this.props.temperature}</span></p> }   \n                {this.props.humidity && <p className =\"weather__key\">Humidity: <span className=\"weather__value\">{this.props.humidity}</span></p>}    \n                {this.props.description && <p className =\"weather__key\">Condition: <span className=\"weather__value\">{this.props.description}</span></p>}   \n                {this.props.error && <p className =\"weather__key\"><span className=\"weather__value\">{this.props.error}</span> </p>}     \n            </div>\n        )\n    }\n}\nexport default Weather;","import React, { Component } from 'react'\n\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"f9157b0df62a7bd9de6904a296a0798c\";\n\nclass App extends Component {\n  state={\n    temperature: undefined,\n    city:undefined,\n    country:undefined,\n    humidity:undefined,\n    description:undefined,\n    error: undefined\n    }\n\n  getWeather = async (e) => {\n  e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch (`http://api.openweathermap.org/data/2.5/weather?q=${city},${country},uk&APPID=${API_KEY}`);\n    const data = await api_call.json();\n      \n      if (city && country){\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:''\n      })\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country:undefined,\n          humidity:undefined,\n          description:undefined,\n          error:\"Please enter the city!\"\n        })\n      }\n\n  }\n  render() {\n    return (\n      <div>\n        <div className =\"wrapper\">\n          <div className =\"main\">\n            <div className =\"container\">\n              <div className =\"row\">\n                <div className =\"col-xs-5 title-container\">\n                  <Title/>\n                </div>\n                <div>\n                  <div className =\" col-xs-7 form-container\">\n                    <Form getWeather={this.getWeather}/>\n                    <Weather \n                    temperature={this.state.temperature}\n                    city= {this.state.city}\n                    country={this.state.country}\n                    humidity= {this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n    )\n  }\n}\nexport default App;\n\n\n       ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}